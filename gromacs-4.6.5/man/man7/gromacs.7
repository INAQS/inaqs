.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\" (and then reused elsewhere, since this isn't a perl package)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GROMACS 7"
.TH GROMACS 7 "2013-12-02" "gromacs" "GROMACS suite, Version 4.6.5"
.SH "NAME"
gromacs \- molecular dynamics simulation suite
.SH "DESCRIPTION"
.B GROMACS
(the Groningen Machine for Chemical Simulations) is a full-featured
suite of programs to perform molecular dynamics simulations - in other
words, to simulate the behavior of systems with hundreds to millions
of particles, using Newtonian equations of motion.  It is primarily
used for research on proteins, lipids, and polymers, but can be applied
to a wide variety of chemical and biological research questions.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.PP
The following commands make up the GROMACS suite.  Please refer to their
individual man pages for further details.
.Sh "Generating topologies and coordinates"
.IX Subsection "Generating topologies and coordinates"
.Vb
.ta 16n
\&  editconf	edits the box and writes subgroups 
\&  g_protonate	protonates structures
\&  g_x2top	generates a primitive topology from coordinates 
\&  genbox	solvates a system
\&  genconf	multiplies a conformation in 'random' orientations
\&  genion	generates mono atomic ions on energetically favorable positions
\&  genrestr	generates position restraints or distance restraints for index groups
\&  pdb2gmx	converts coordinate files to topology and FF-compliant coordinate files
.Ve
.Sh "Running a simulation"
.IX Subsection "Running a simulation"
.Vb
.ta 16n
\&  grompp	makes a run input file
\&  mdrun	performs a simulation, do a normal mode analysis or an energy minimization
\&  tpbconv	makes a run input file for restarting a crashed run
.Ve
.Sh "Viewing trajectories"
.IX Subsection "Viewing trajectories"
.Vb
.ta 16n
\&  g_nmtraj	generate a virtual trajectory from an eigenvector
\&  ngmx	displays a trajectory
.Ve
.Sh "Processing energies"
.IX Subsection "Processing energies"
.Vb
.ta 16n
\&  g_enemat	extracts an energy matrix from an energy file
\&  g_energy	writes energies to xvg files and displays averages
\&  mdrun	with -rerun (re)calculates energies for trajectory frames
.Ve
.Sh "Converting files"
.IX Subsection "Converting files"
.Vb
.ta 16n
\&  editconf	converts and manipulates structure files
\&  eneconv	converts energy files
\&  g_sigeps	convert c6/12 or c6/cn combinations to and from sigma/epsilon
\&  trjcat	concatenates trajectory files
\&  trjconv	converts and manipulates trajectory files
\&  xpm2ps	converts XPM matrices to encapsulated postscript (or XPM)
.Ve
.Sh "Tools"
.IX Subsection "Tools"
.Vb
.ta 16n
\&  g_analyze	analyzes data sets
\&  g_dyndom	interpolate and extrapolate structure rotations
\&  g_filter	frequency filters trajectories, useful for making smooth movies
\&  g_lie	free energy estimate from linear combinations
\&  g_morph	linear interpolation of conformations 
\&  g_pme_error	estimates the error of using PME with a given input file
\&  g_select	selects groups of atoms based on flexible textual selections
\&  g_sham	read/write xmgr and xvgr data sets
\&  g_spatial	calculates the spatial distribution function
\&  g_traj	plots x, v and f of selected atoms/groups (and more) from a trajectory
\&  g_tune_pme	time mdrun as a function of PME nodes to optimize settings
\&  g_wham	weighted histogram analysis after umbrella sampling
\&  gmxcheck	checks and compares files
\&  gmxdump	makes binary files human readable
\&  make_ndx	makes index files
\&  mk_angndx	generates index files for g_angle
\&  trjorder	orders molecules according to their distance to a group
\&  xpm2ps	convert XPM (XPixelMap) file to postscript
.Ve
.Sh "Distances between structures"
.IX Subsection "Distances between structures"
.Vb
.ta 16n
\&  g_cluster	clusters structures
\&  g_confrms	fits two structures and calculates the rmsd 
\&  g_rms	calculates rmsd's with a reference structure and rmsd matrices
\&  g_rmsf	calculates atomic fluctuations
.Ve
.Sh "Distances in structures over time"
.IX Subsection "Distances in structures over time"
.Vb
.ta 16n
\&  g_bond	calculates distances between atoms
\&  g_dist	calculates the distances between the centers of mass of two groups
\&  g_mindist	calculates the minimum distance between two groups
\&  g_mdmat	calculates residue contact maps
\&  g_polystat	calculates static properties of polymers
\&  g_rmsdist	calculates atom pair distances averaged with power -2, -3 or -6
.Ve
.Sh "Mass distribution properties over time"
.IX Subsection "Mass distribution properties over time"
.Vb
.ta 16n
\&  g_gyrate	calculates the radius of gyration
\&  g_msd	calculates mean square displacements
\&  g_polystat	calculates static properties of polymers
\&  g_rdf	calculates radial distribution functions
\&  g_rotacf	calculates the rotational correlation function for molecules
\&  g_rotmat	plots the rotation matrix for fitting to a reference structure
\&  g_sans	computes the small angle neutron scattering spectra
\&  g_traj	plots x, v, f, box, temperature and rotational energy
\&  g_vanhove	calculates Van Hove displacement functions
.Ve
.Sh "Analyzing bonded interactions"
.IX Subsection "Analyzing bonded interactions"
.Vb
.ta 16n
\&  g_angle	calculates distributions and correlations for angles and dihedrals
\&  g_bond	calculates bond length distributions
\&  mk_angndx	generates index files for g_angle
.Ve
.Sh "Structural properties"
.IX Subsection "Structural properties"
.Vb
.ta 16n
\&  g_anadock	cluster structures from Autodock runs
\&  g_bundle	analyzes bundles of axes, e.g. helices
\&  g_clustsize	calculate size distributions of atomic clusters
\&  g_disre	analyzes distance restraints
\&  g_hbond	computes and analyzes hydrogen bonds
\&  g_order	computes the order parameter per atom for carbon tails
\&  g_principal	calculates axes of inertia for a group of atoms
\&  g_rdf	calculates radial distribution functions
\&  g_saltbr	computes salt bridges
\&  g_sas	computes solvent accessible surface area
\&  g_sgangle	computes the angle and distance between two groups
\&  g_sorient	analyzes solvent orientation around solutes
\&  g_spol	analyzes solvent dipole orientation and polarization around solutes
.Ve
.Sh "Kinetic properties"
.IX Subsection "Kinetic properties"
.Vb
.ta 16n
\&  g_bar	calculates free energy difference estimates through Bennett's acceptance ratio
\&  g_current	calculate current autocorrelation function of system
\&  g_dos	analyzes density of states and properties based on that
\&  g_dyecoupl	extracts dye dynamics from trajectories
\&  g_kinetics	analyzes kinetic constants from properties based on the Eyring model
\&  g_principal	calculate principal axes of inertion for a group of atoms
\&  g_tcaf	calculates viscosities of liquids
\&  g_traj	plots x, v, f, box, temperature and rotational energy
\&  g_vanhove	compute Van Hove correlation function
\&  g_velacc	calculates velocity autocorrelation functions
.Ve
.Sh "Electrostatic properties"
.IX Subsection "Electrostatic properties"
.Vb
.ta 16n
\&  g_current	calculates dielectric constants for charged systems
\&  g_dielectric	calculates frequency dependent dielectric constants
\&  g_dipoles	computes the total dipole plus fluctuations
\&  g_potential	calculates the electrostatic potential across the box
\&  g_spol	analyze dipoles around a solute
\&  genion	generates mono atomic ions on energetically favorable positions
.Ve
.Sh "Protein-specific analysis"
.IX Subsection "Protein-specific analysis"
.Vb
.ta 16n
\&  do_dssp	assigns secondary structure and calculates solvent accessible surface area
\&  g_chi	calculates everything you want to know about chi and other dihedrals
\&  g_helix	calculates basic properties of alpha helices
\&  g_helixorient	calculates local pitch/bending/rotation/orientation inside helices
\&  g_rama	computes Ramachandran plots
\&  g_wheel	plots helical wheels
\&  g_xrama	shows animated Ramachandran plots
.Ve
.Sh "Interfaces"
.IX Subsection "Interfaces"
.Vb
.ta 16n
\&  g_bundle	analyzes bundles of axes, e.g. transmembrane helices
\&  g_density	calculates the density of the system
\&  g_densmap	calculates 2D planar or axial-radial density maps
\&  g_densorder	calculate surface fluctuations
\&  g_h2order	computes the orientation of water molecules
\&  g_hydorder	computes tetrahedrality parameters around a given atom
\&  g_order	computes the order parameter per atom for carbon tails
\&  g_membed	embeds a protein into a lipid bilayer
\&  g_potential	calculates the electrostatic potential across the box
.Ve
.Sh "Covariance analysis"
.IX Subsection "Covariance analysis"
.Vb
.ta 16n
\&  g_anaeig	analyzes the eigenvectors
\&  g_covar	calculates and diagonalizes the covariance matrix
\&  make_edi	generate input files for essential dynamics sampling
.Ve
.Sh "Normal modes"
.IX Subsection "Normal modes"
.Vb
.ta 16n
\&  g_anaeig	analyzes the normal modes
\&  g_nmeig	diagonalizes the Hessian 
\&  g_nmtraj	generate oscillating trajectory of an eigenmode
\&  g_nmens	generates an ensemble of structures from the normal modes
\&  grompp	makes a run input file
\&  mdrun	finds a potential energy minimum and calculates the Hessian
.Ve

.PP
.SH "ADDITIONAL DOCUMENTATION"
.IX Header "ADDITIONAL DOCUMENTATION"
Consult the manual at <\fIhttp://www.gromacs.org/content/view/27/42/\fR> for an
introduction to molecular dynamics in general and GROMACS in particular,
as well as an overview of the individual programs.
.PP
The shorter HTML reference and GROMACS FAQ are available in \fB/usr/share/doc/gromacs/html/\fR .
.PP
Tutorial files and other miscellaneous references are stored in \fB/usr/share/gromacs/\fR .
.SH "REFERENCES"
.IX Header "REFERENCES"
The development of GROMACS is mainly funded by academic research grants.
To help us fund development, the authors humbly ask that you cite the GROMACS papers:
.PP
H.J.C. Berendsen, D. van der Spoel and R. van Drunen.  \fBGROMACS: A message-passing
parallel molecular dynamics implementation\fR.  Comp. Phys. Comm. \fI91\fR, 43-56 (1995)
.PP
Erik Lindahl, Berk Hess and David van der Spoel.  \fBGROMACS 3.0: A package for 
molecular simulation and trajectory analysis\fR.  J. Mol. Mod. \fI7\fR, 306-317 (2001)
.PP
B. Hess, C. Kutzner, D. van der Spoel, and E. Lindahl.  \fBGROMACS 4: Algorithms for
Highly Efficient, Load-Balanced, and Scalable Molecular Simulation\fR.  J. Chem. Theory 
Comput. \fI4\fR, 3, 435-447 (2008), <\fIhttp://dx.doi.org/10.1021/ct700301q\fR>
.SH "AUTHORS"
.IX Header "AUTHORS"
Current developers:
.PP
David van der Spoel <spoel@gromacs.org>
.br
Berk Hess <hess@gromacs.org>
.br
Erik Lindahl <lindahl@gromacs.org>
.PP
A full list of present and former contributors
is available at <http://www.gromacs.org>
.PP
This manual page is largely based on the GROMACS online reference, and was
prepared in this format by Nicholas Breen <nbreen@ofb.net>.
.SH "BUGS"
.IX Header "BUGS"
GROMACS has no major known bugs, but be warned that it stresses your CPU more
than most software.  Systems with slightly flaky hardware may prove unreliable
while running heavy-duty simulations.  If at all possible, please try to
reproduce bugs on another machine before reporting them.
